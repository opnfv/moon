{
  "comments": [
    {
      "key": {
        "uuid": "9a3d3df0_fd1ef90a",
        "filename": "moon_interface/moon_interface/http_server.py",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1384
      },
      "writtenOn": "2018-01-11T10:56:21Z",
      "side": 1,
      "message": "I\u0027m not sure to understand your question. You propose to manage all response code (including 500) here in the __hook_errors functions ?",
      "range": {
        "startLine": 122,
        "startChar": 8,
        "endLine": 122,
        "endChar": 11
      },
      "revId": "8f8272dbd11ab01fc92b72b18e67b6793e856ee8",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_1dd0fd1d",
        "filename": "moon_interface/moon_interface/http_server.py",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 7131
      },
      "writtenOn": "2018-01-11T11:15:20Z",
      "side": 1,
      "message": "my point is\n- you sometime throw an exception (ex. auth_requests/run)\n- and other time you return  {\"result\": False,\n            message\": \"Authz request had timed out.\"}, 500\n\nso the question here when should i use this and when should i use that, although in the http_server you catch the thrown exception and return a failure response with certain status code",
      "parentUuid": "9a3d3df0_fd1ef90a",
      "range": {
        "startLine": 122,
        "startChar": 8,
        "endLine": 122,
        "endChar": 11
      },
      "revId": "8f8272dbd11ab01fc92b72b18e67b6793e856ee8",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_bd15914a",
        "filename": "moon_interface/moon_interface/http_server.py",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1384
      },
      "writtenOn": "2018-01-11T15:47:59Z",
      "side": 1,
      "message": "When the API gives a response to the external caller, it must always be through a dictionary (return {\"result\": ...}, ERROR_CODE) because the caller need this dict. \n\nBut throwing an exception allows to skip a part of the code and speed up the response (specially on error responses). That\u0027s why you can find both. Maybe it would be better to always throw an exception when an error occurred and if this error automatically leads to the end of the request.\n\nAn other point, I wrote this function (__hook_errors) to be able to catch un-controllable errors like 404 or to transform some exceptions in dictionary like the 403 error.",
      "parentUuid": "9a3d3df0_1dd0fd1d",
      "range": {
        "startLine": 122,
        "startChar": 8,
        "endLine": 122,
        "endChar": 11
      },
      "revId": "8f8272dbd11ab01fc92b72b18e67b6793e856ee8",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_a0b8cac8",
        "filename": "moon_interface/moon_interface/http_server.py",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 7131
      },
      "writtenOn": "2018-01-11T17:44:35Z",
      "side": 1,
      "message": "good, so you agree that in case an error occurred, it would be better throwing an exception rather than sending result with error code (as the exception was already thrown in some cases )",
      "parentUuid": "9a3d3df0_bd15914a",
      "range": {
        "startLine": 122,
        "startChar": 8,
        "endLine": 122,
        "endChar": 11
      },
      "revId": "8f8272dbd11ab01fc92b72b18e67b6793e856ee8",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_43010805",
        "filename": "moon_interface/moon_interface/http_server.py",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 1384
      },
      "writtenOn": "2018-01-12T09:19:00Z",
      "side": 1,
      "message": "Yes",
      "parentUuid": "9a3d3df0_a0b8cac8",
      "range": {
        "startLine": 122,
        "startChar": 8,
        "endLine": 122,
        "endChar": 11
      },
      "revId": "8f8272dbd11ab01fc92b72b18e67b6793e856ee8",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_773e828d",
        "filename": "moon_interface/moon_interface/http_server.py",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 7131
      },
      "writtenOn": "2018-01-14T15:38:17Z",
      "side": 1,
      "message": "i have two points here\n1 -  i suppose you want to catch AuthzException not Auth\n2 - i suppose also you want to catch exception and then return a certain response, and if so it should be written in different way\n\napp.register_error_handler(ex.AuthzException , customized_one)",
      "range": {
        "startLine": 124,
        "startChar": 17,
        "endLine": 124,
        "endChar": 39
      },
      "revId": "8f8272dbd11ab01fc92b72b18e67b6793e856ee8",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_8614b9a0",
        "filename": "moon_interface/moon_interface/http_server.py",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1384
      },
      "writtenOn": "2018-01-15T15:01:54Z",
      "side": 1,
      "message": "1) yes\n2) yes but why do you think it must be written in an other way, the flask documentation says:\n- \"app.register_error_handler(400, lambda e: \u0027bad request!\u0027)\", \n- app.register_error_handler(\u003cerror_code\u003e, \u003cfunction\u003e)\n\nSee http://flask.pocoo.org/docs/0.12/errorhandling/#error-handlers",
      "parentUuid": "9a3d3df0_773e828d",
      "range": {
        "startLine": 124,
        "startChar": 17,
        "endLine": 124,
        "endChar": 39
      },
      "revId": "8f8272dbd11ab01fc92b72b18e67b6793e856ee8",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_dd7a1576",
        "filename": "moon_interface/moon_interface/server.py",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1384
      },
      "writtenOn": "2018-01-11T10:56:21Z",
      "side": 1,
      "message": "No, we change the name of the interface component to pipeline to avoid confusion ; now, we have a pipeline component which is composed of 2 pods : interface and authz",
      "range": {
        "startLine": 20,
        "startChar": 9,
        "endLine": 20,
        "endChar": 22
      },
      "revId": "8f8272dbd11ab01fc92b72b18e67b6793e856ee8",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_3d8b4169",
        "filename": "moon_interface/moon_interface/server.py",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1384
      },
      "writtenOn": "2018-01-11T10:56:21Z",
      "side": 1,
      "message": "same reason.",
      "range": {
        "startLine": 30,
        "startChar": 9,
        "endLine": 30,
        "endChar": 22
      },
      "revId": "8f8272dbd11ab01fc92b72b18e67b6793e856ee8",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    }
  ]
}